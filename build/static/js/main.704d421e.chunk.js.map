{"version":3,"sources":["DataService.ts","Text.tsx","Ship.tsx","ShipList.tsx","YearShip.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["query","a","fetch","json","response","ships","data","allArticle","edges","edge","node","sd","ship","slug","id","name","title","description","body","categories","tags","url","template","length","t","SpacecraftShip","ss","manufacturer","undefined","releaseDate","exec","role","thumbnail","image","push","Text","text","html","useMemo","fragment","split","fragments","i","f","m","href","target","className","Ship","style","backgroundImage","ShipList","map","x","YearShip","year","App","useState","setShips","fetchData","useCallback","list","grouped","s","yd","Object","keys","sort","b","parseInt","localeCompare","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQA2DeA,G,MAxCJ,uCAAG,gEAAAC,EAAA,sEACoBC,MAAM,sBAD1B,8BACiDC,OADjD,UACJC,EADI,OAEJC,EAAqB,KAFjB,OAGND,QAHM,IAGNA,GAHM,UAGNA,EAAUE,YAHJ,iBAGN,EAAgBC,kBAHV,aAGN,EAA4BC,OAHtB,sCAIaJ,QAJb,IAIaA,OAJb,EAIaA,EAAUE,KAAKC,WAAWC,OAJvC,+DAIKC,EAJL,SAKOC,KALP,oBAMQC,EAAKF,EAAKC,KACVE,EAAkB,CACpBC,KAAMF,EAAGE,KACTC,GAAIH,EAAGG,GACPC,KAAMJ,EAAGK,MACTC,YAAaN,EAAGO,KAChBC,WAAU,UAAER,EAAGQ,kBAAL,QAAmB,GAC7BC,KAAI,UAAET,EAAGS,YAAL,QAAa,GACjBC,IAAI,2DAAD,OAA4DV,EAAGG,GAA/D,YAAqEH,EAAGE,SAdjF,UAgBMF,EAAGW,gBAhBT,aAgBM,EAAaC,QAhBnB,+BAiBsBZ,EAAGW,UAjBzB,gEAiBiBE,EAjBjB,SAkBgBC,eAlBhB,wBAmBoBC,EAAKF,EAAEC,eACbb,EAAKe,aAAeD,EAAGC,mBAAgBC,EACvChB,EAAKiB,aAAc,kBAAQC,KAAR,UAAaJ,EAAGG,mBAAhB,QAA+B,WAA/B,eAAqC,UAAMD,EAC9DhB,EAAKmB,KAAOL,EAAGK,WAAQH,EAtBrC,uKA2BE,UAAIjB,EAAGqB,iBAAP,aAAI,EAAcX,OACdT,EAAKqB,MAAQtB,EAAGqB,UAAUX,KAE1BT,EAAKe,cACLtB,EAAM6B,KAAKtB,GA/BjB,yKAsCHP,GAtCG,8EAAH,sD,OCEI8B,MAnBf,YAAuD,IAAvCC,EAAsC,EAAtCA,KACNC,EAAOC,mBAAQ,WACjB,IAAKF,EAAM,MAAO,GAElB,IAHuB,EAGjBG,EAAWH,EAAKI,MAAM,uDACtBC,EAA2B,GAC7BC,EAAI,EALe,cAMPH,GANO,IAMvB,2BAA0B,CAAC,IAAhBI,EAAe,QACtB,GAAIA,EAAG,CACHD,IACA,IAAME,EAAI,2BAA2Bd,KAAKa,GAC1CF,EAAUP,KAAKU,EAAK,oBAAWC,KAAMD,EAAE,GAAIE,OAAO,eAA9B,cAAgDF,EAAE,KAA1CF,GAAsD,+BAAgBC,GAALD,MAV9E,8BAavB,OAAOD,IACR,CAACL,IACJ,OAAO,sBAAMW,UAAU,OAAhB,SAAwBV,KCHpBW,MAbf,YAA8C,IAA9BpC,EAA6B,EAA7BA,KACNqC,EAAQ,CACVC,gBAAgB,OAAD,OAAStC,EAAKqB,MAAd,MAEnB,OAAO,sBAAKc,UAAU,OAAf,UACH,mBAAGA,UAAU,QAAQD,OAAO,eAAeG,MAAOA,EAAOJ,KAAMjC,EAAKS,MACpE,qBAAK0B,UAAU,WAAf,SAA0B,cAAC,EAAD,CAAMX,KAAMxB,EAAKG,SAC3C,qBAAKgC,UAAU,aAAf,0BACA,qBAAKA,UAAU,mBAAf,SAAkC,cAAC,EAAD,CAAMX,KAAMxB,EAAKe,iBACnD,qBAAKoB,UAAU,aAAf,kBACA,qBAAKA,UAAU,WAAf,SAA0B,cAAC,EAAD,CAAMX,KAAMxB,EAAKmB,aCDpCoB,MANf,YAAsD,IAAlC9C,EAAiC,EAAjCA,MAChB,OAAO,qBAAK0C,UAAU,YAAf,gBACF1C,QADE,IACFA,OADE,EACFA,EAAO+C,KAAI,SAACC,GAAD,OAAY,cAAC,EAAD,CAAiBzC,KAAMyC,GAAZA,EAAEvC,UCI9BwC,MATf,YAA0E,IAAtDC,EAAqD,EAArDA,KAAMlD,EAA+C,EAA/CA,MACtB,OAAO,sBAAK0C,UAAU,WAAf,UACH,qBAAKA,UAAU,OAAf,SACKQ,IAEL,cAAC,EAAD,CAAUlD,MAAOA,MAJiBkD,ICiC3BC,MA7Bf,WACE,MAA0BC,mBAAqB,IAA/C,mBAAOpD,EAAP,KAAcqD,EAAd,KACMC,EAAYC,sBAAW,sBAAC,8CAAA3D,EAAA,sEACTD,IADS,OACtB6D,EADsB,OAEtBC,EAAwC,GAFlB,cAGZD,GAHY,IAG5B,2BAAWE,EAAW,SACdR,EADc,UACPQ,EAAElC,mBADK,QACU,OAChBiC,IACZA,EAAQP,GAAQ,IAElBO,EAAQP,GAAMrB,KAAK6B,GARO,+BAUtBC,EAAKC,OAAOC,KAAKJ,GAASV,KAAI,SAAAC,GAAC,MAAK,CAAEE,KAAMF,EAAGhD,MAAOyD,EAAQT,QACjEc,MAAK,SAAClE,EAAGmE,GAAJ,OAAUC,SAASpE,EAAEsD,KAAM,IAAMc,SAASD,EAAEb,KAAM,OAX9B,cAYZS,GAZY,IAY5B,2BAAoB,QAChB3D,MAAM8D,MAAK,SAAClE,EAAGmE,GAAJ,eAAU,UAACnE,EAAE0B,oBAAH,QAAmB,IAAI2C,cAAvB,UAAqCF,EAAEzC,oBAAvC,QAAuD,OAbpD,8BAe5B+B,EAASM,GAfmB,4CAgB3B,IAIH,OAHAO,qBAAU,WACRZ,MACC,IAED,qBAAKZ,UAAU,MAAf,SACG1C,EAAM+C,KAAI,SAAAC,GAAC,OAAK,cAAC,EAAD,CAAuBE,KAAMF,EAAEE,KAAMlD,MAAOgD,EAAEhD,OAA/BgD,EAAEE,YCjBzBiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.704d421e.chunk.js","sourcesContent":["export interface IGalactapediaLink {\r\n    name: string\r\n    slug: string\r\n    __typename: string\r\n}\r\nexport interface IShipData {\r\n    id: string\r\n    name: string\r\n    slug: string\r\n    description: string\r\n    categories: IGalactapediaLink[]\r\n    tags: IGalactapediaLink[]\r\n    manufacturer?: string\r\n    role?: string\r\n    releaseDate?: string\r\n    image?: string\r\n    url: string\r\n}\r\n\r\nconst query = async () => {\r\n    const response = await (await fetch('./assets/data.json')).json();\r\n    const ships: IShipData[] = [];\r\n    if (response?.data?.allArticle?.edges) {\r\n        for (const edge of response?.data.allArticle.edges) {\r\n            if (edge.node) {\r\n                const sd = edge.node;\r\n                const ship: IShipData = {\r\n                    slug: sd.slug,\r\n                    id: sd.id,\r\n                    name: sd.title,\r\n                    description: sd.body,\r\n                    categories: sd.categories ?? [],\r\n                    tags: sd.tags ?? [],\r\n                    url:`https://robertsspaceindustries.com/galactapedia/article/${sd.id}-${sd.slug}`\r\n                }\r\n                if (sd.template?.length) {\r\n                    for (const t of sd.template) {\r\n                        if (t.SpacecraftShip) {\r\n                            const ss = t.SpacecraftShip;\r\n                            ship.manufacturer = ss.manufacturer || undefined;\r\n                            ship.releaseDate = /\\d{4}/.exec(ss.releaseDate ?? '')?.[0] || undefined;\r\n                            ship.role = ss.role || undefined;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (sd.thumbnail?.url) {\r\n                    ship.image = sd.thumbnail.url;\r\n                }\r\n                if (ship.manufacturer) {\r\n                    ships.push(ship)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n    return ships;\r\n};\r\nexport default query","import { useMemo } from \"react\";\r\n\r\nfunction Text({ text }: { text: string | undefined }) {\r\n    const html = useMemo(() => {\r\n        if (!text) return '';\r\n\r\n        const fragment = text.split(/(?=\\[[^\\]]+\\]\\([^\\)]+\\))|(?<=\\[[^\\]]+\\]\\([^\\)]+\\))/g);\r\n        const fragments: JSX.Element[] = [];\r\n        let i = 0;\r\n        for (const f of fragment) {\r\n            if (f) {\r\n                i++;\r\n                const m = /\\[([^\\]]+)\\]\\(([^\\)]+)\\)/.exec(f);\r\n                fragments.push(m ? (<a key={i} href={m[2]} target=\"galactapedia\" > {m[1]}</a>) : (<span key={i} >{f}</span>))\r\n            }\r\n        }\r\n        return fragments;\r\n    }, [text]);\r\n    return <span className=\"text\">{html}</span>\r\n}\r\n\r\nexport default Text;","import { IShipData, IGalactapediaLink } from './DataService';\r\nimport Text from './Text';\r\nfunction Ship({ ship }: { ship: IShipData }) {\r\n    const style = {\r\n        backgroundImage: `url(${ship.image})`\r\n    }\r\n    return <div className=\"ship\">\r\n        <a className=\"image\" target=\"galactapedia\" style={style} href={ship.url}></a>\r\n        <div className=\"name row\"><Text text={ship.name}></Text></div>\r\n        <div className=\"legend row\">Manufacturer</div>\r\n        <div className=\"manufacturer row\"><Text text={ship.manufacturer}></Text></div>\r\n        <div className=\"legend row\">Role</div>\r\n        <div className=\"role row\"><Text text={ship.role}></Text></div>\r\n    </div>\r\n}\r\nexport default Ship","import { useState, useEffect } from \"react\";\r\nimport query from \"./DataService\";\r\nimport Ship from \"./Ship\";\r\nimport { IShipData } from './DataService';\r\n\r\nfunction ShipList({ ships }: { ships: IShipData[] }) {\r\n    return <div className=\"ship-list\">\r\n        {ships?.map((x: any) => <Ship key={x.id} ship={x}></Ship>)}\r\n    </div>\r\n}\r\n\r\nexport default ShipList;","import { IShipData } from './DataService';\r\nimport ShipList from './ShipList';\r\nfunction YearShip({ year, ships }: { year: string, ships: IShipData[] }) {\r\n    return <div className=\"year-row\" key={year}>\r\n        <div className=\"year\">\r\n            {year}\r\n        </div>\r\n        <ShipList ships={ships}></ShipList>\r\n    </div>;\r\n}\r\n\r\nexport default YearShip;","import { useState } from 'react';\nimport './App.scss';\nimport query, { IShipData } from './DataService';\nimport { useEffect } from 'react';\nimport { useCallback } from 'react';\nimport YearShip from './YearShip';\ntype YearData = { year: string, ships: IShipData[] }\nfunction App() {\n  const [ships, setShips] = useState<YearData[]>([]);\n  const fetchData = useCallback(async () => {\n    const list = await query();\n    const grouped: { [y: string]: IShipData[] } = {};\n    for (const s of list) {\n      const year = s.releaseDate ?? '?';\n      if (!(year in grouped)) {\n        grouped[year] = [];\n      }\n      grouped[year].push(s);\n    }\n    const yd = Object.keys(grouped).map(x => ({ year: x, ships: grouped[x] }));\n    yd.sort((a, b) => parseInt(a.year, 10) - parseInt(b.year, 10));\n    for (const y of yd) {\n      y.ships.sort((a, b) => (a.manufacturer ?? '').localeCompare(b.manufacturer ?? ''));\n    }\n    setShips(yd);\n  }, []);\n  useEffect(() => {\n    fetchData();\n  }, [])\n  return (\n    <div className=\"App\">\n      {ships.map(x => (<YearShip key={x.year} year={x.year} ships={x.ships}></YearShip>))}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}